#BlueJ class context
comment0.target=StringProcessingPractice
comment0.text=\r\n\ APCS-A\ -\ Strings\ and\ Loops\r\n\r\n\ This\ program\ is\ to\ give\ you\ practice\ writing\ methods\ that\ use\ for\ loops.\ Each\r\n\ problem\ requires\ logic\ similar\ to\ what\ may\ be\ required\ on\ AP\ Exam\ FRQs.\ \ \r\n\r\n\ Choose\ any\ 5\ of\ the\ 7\ problems\ to\ complete.\ Doing\ more\ will\ not\ result\ in\ \r\n\ extra\ credit.\ Each\ problem\ will\ be\ graded\ on\ a\ 1-4\ scale.\ Strive\ for\ simple\r\n\ solutions\ and\ do\ not\ do\ anything\ more\ than\ meet\ problem\ specifications.\ You\ \r\n\ will\ receive\ a\ one\ point\ deduction\ for\ extraneous\ code\ that\ has\ an\ effect\ \r\n\ (for\ example,\ prints\ something.)\ Overly\ complex,\ working\ code\ or\ code\ with\ \r\n\ logic\ masked\ by\ non-descriptive\ variable\ names\ may\ also\ receive\ a\ one\ point\r\n\ deduction.\ \r\n\ \r\n\ \r\n\ 1.\ The\ function\ testGrader\ works\ by\ comparing\ two\ strings,\ answers\ and\ key.\ \r\n\ \ \ \ answers\ will\ be\ a\ string\ of\ letters\ and\ possibly\ ?\ characters\ which\ represent\ \r\n\ \ \ \ unanswered\ questions.\ key\ is\ the\ corresponding\ string\ of\ correct\ answers.\ \r\n\ \ \ \ Grades\ are\ calculated\ by\ awarding\ 1\ point\ for\ correct\ answers,\ no\ points\ for\ \r\n\ \ \ \ unanswered\ questions,\ and\ deducting\ 0.25\ points\ for\ incorrect\ answers.\ For\ \r\n\ \ \ \ example,\ the\ answer\ sheet\ with\ DA?BCA\ graded\ against\ the\ key\ DBCBCA\ would\ be\r\n\ \ \ \ given\ a\ score\ of\ 3.75.\r\n\ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ public\ __________\ testGrader(String\ answers,\ String\ key)\ {\ }\r\n\ \ \r\n\ \ \r\n\ 2.\ The\ function\ letterSwapper\ takes\ a\ string\ str\ as\ input\ and\ returning\ a\ new\ \r\n\ \ \ \ string\ with\ each\ pair\ of\ letters\ swapped.\ In\ the\ case\ of\ an\ odd\ number\ of\ \r\n\ \ \ \ characters\ in\ the\ string,\ the\ last\ character\ is\ simply\ appended\ to\ the\ end.\ \r\n\ \ \ \ For\ example\ passing\ a\ string\ of\ loops\ would\ return\ a\ string\ of\ olpos.\ \r\n\ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ public\ __________\ letterSwapper(String\ str)\ {\ }\r\n\ \ \ \ \ \ \r\n\ \ \ \ \ \ \r\n\ 3.\ The\ function\ caseComparer\ returns\ true\ if\ the\ input\ string\ contains\ the\ same\ \r\n\ \ \ \ number\ of\ lowercase\ letters\ as\ it\ does\ uppercase\ and\ false\ otherwise.\ The\ \r\n\ \ \ \ string\ may\ contain\ non-alphabetic\ characters.\ (Uppercase\ letters\ have\ ASCII\ \r\n\ \ \ \ values\ in\ the\ range\ 65\ to\ 90\ and\ lowercase\ letters\ values\ in\ the\ range\ \r\n\ \ \ \ 97\ to\ 122.)\r\n\ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ public\ __________\ caseComparer(String\ str)\ {\ }\r\n\ \ \ \ \ \ \r\n\ \ \ \ \ \ \r\n\ \ 4.\ A\ charFilter\ takes\ a\ string\ str\ and\ returns\ a\ new\ string\ which\ contains\ only\ \r\n\ \ \ \ \ the\ characters\ in\ str\ that\ also\ appear\ in\ allowed.\ For\ example,\ a\ call\ of\ \r\n\ \ \ \ \ charFilter(\u201Ccomputers\u201D,\ \u201Cosmgur\u201D)\ would\ return\ omr.\r\n\ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ public\ __________\ charFilter(String\ str,\ String\ allowed)\ {\ }\r\n\ \ \ \ \ \r\n\ \ \ \ \ \r\n\ 5.\ A\ trimmedRepeater\ takes\ a\ string\ str\ and\ returns\ a\ new\ string\ which\ contains\r\n\ \ \ \ the\ the\ whole\ string,\ followed\ by\ all\ characters\ except\ the\ first,\ all\ characters\r\n\ \ \ \ except\ the\ second,\ and\ so\ on.\ For\ example,\ a\ call\ of\ charRepeater(\u201Capple\u201D)\ would\ \r\n\ \ \ \ return\ appleppleplelee.\r\n\ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ public\ __________\ trimmedRepeater(String\ str)\ {\ }\r\n\ \ \ \ \ \r\n\ \ \ \ \ \r\n\ 6.\ A\ patternCounter\ takes\ a\ string\ str\ and\ returns\ a\ count\ of\ the\ number\ of\ times\ \r\n\ \ \ \ pattern\ occurs\ in\ the\ string.\ For\ example,\ a\ call\ of\ charRepeater(\u201Cyyyyaddyycyyy\u201D,\ \u201Cyyy\u201D)\r\n\ \ \ \ would\ return\ 3.\r\n\ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ public\ __________\ patternCounter(String\ str,\ String\ pattern)\ {\ }\r\n\ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ \r\n\ 7.\ A\ starChecker\ takes\ a\ string\ str\ and\ returns\ true\ if\ for\ each\ occurrence\ of\ a\ *\ character,\ \r\n\ \ \ \ the\ characters\ on\ either\ side\ of\ the\ star\ are\ the\ same\ and\ false\ otherwise.\ If\ a\ *\ happens\r\n\ \ \ \ to\ be\ at\ the\ end\ of\ the\ string,\ then\ it\ should\ return\ false.\r\n\ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ public\ __________\ starChecker(String\ str)\ {\ }\r\n\r\n\r\n\ \ ------------------------------------------------------------------------------\r\n\r\n\ @author\ \ your\ name\ \r\n\ @version\ date\r\n
comment1.params=answers\ key
comment1.target=double\ testGrader(java.lang.String,\ java.lang.String)
comment2.params=str
comment2.target=void\ letterSwapper(java.lang.String)
comment3.params=str\ allowed
comment3.target=void\ charFilter(java.lang.String,\ java.lang.String)
comment4.params=str
comment4.target=void\ trimmedRepeater(java.lang.String)
comment5.params=str
comment5.target=void\ starChecker(java.lang.String)
comment6.params=args
comment6.target=void\ main(java.lang.String[])
numComments=7
